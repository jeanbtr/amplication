/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Whistlist, // @ts-ignore
  Listing, // @ts-ignore
  User,
} from "@prisma/client";

export class WhistlistServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.WhistlistCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.WhistlistCountArgs>
  ): Promise<number> {
    return this.prisma.whistlist.count(args);
  }

  async whistlists<T extends Prisma.WhistlistFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WhistlistFindManyArgs>
  ): Promise<Whistlist[]> {
    return this.prisma.whistlist.findMany(args);
  }
  async whistlist<T extends Prisma.WhistlistFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WhistlistFindUniqueArgs>
  ): Promise<Whistlist | null> {
    return this.prisma.whistlist.findUnique(args);
  }
  async createWhistlist<T extends Prisma.WhistlistCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WhistlistCreateArgs>
  ): Promise<Whistlist> {
    return this.prisma.whistlist.create<T>(args);
  }
  async updateWhistlist<T extends Prisma.WhistlistUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WhistlistUpdateArgs>
  ): Promise<Whistlist> {
    return this.prisma.whistlist.update<T>(args);
  }
  async deleteWhistlist<T extends Prisma.WhistlistDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WhistlistDeleteArgs>
  ): Promise<Whistlist> {
    return this.prisma.whistlist.delete(args);
  }

  async getListing(parentId: string): Promise<Listing | null> {
    return this.prisma.whistlist
      .findUnique({
        where: { id: parentId },
      })
      .listing();
  }

  async getUser(parentId: string): Promise<User | null> {
    return this.prisma.whistlist
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
